{"version":3,"sources":["Login.js","Timer.js","Firebase.js","HighScores.js","App.js","index.js"],"names":["Login","handleClick","setState","userName","state","name","className","action","htmlFor","onChange","this","handleChange","value","placeholder","type","id","required","onClick","Component","Timer","props","secondsVal","botInterrupt","generateWeightedRandomValue","console","log","secondVal","setInterval","tick","clearInterval","timerID","countDown","minutes","parseInt","seconds","weightedRandomValue","Math","floor","random","num","countdownOrReset","formatForDisplay","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","HighScores","highScores","database","ref","on","snapshot","data","val","latestHighScores","score","scoreObject","scoreValue","push","map","oneOfMyScores","key","App","username","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTA0CeA,E,kDAvCb,aAAe,IAAD,8BACZ,gBAMFC,YAAc,WACZ,EAAKC,SAAS,CAEZC,SAAU,MARZ,EAAKC,MAAQ,CACXC,KAAM,IAHI,E,qDAeZ,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,cACb,6BACE,0BAAMC,OAAO,SAASD,UAAU,cAC9B,2BAAOE,QAAQ,cAAf,eAEA,2BACEC,SAAUC,KAAKC,aACfC,MAAOF,KAAKN,MAAMD,SAClBU,YAAY,aACZC,KAAK,OACLC,GAAG,aACHC,UAAQ,IAEV,4BAAQC,QAASP,KAAKT,aAAtB,iB,GA/BMiB,aCuELC,G,wDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDhB,MAAQ,CACXiB,WAAY,GACZC,aAAc,EAAKC,+BAErBC,QAAQC,IAAI,EAAKrB,MAAMkB,cANN,E,gEASE,IAAD,OAClBZ,KAAKgB,UAAYC,aAAY,kBAAM,EAAKC,SAAQ,O,6CAIhDC,cAAcnB,KAAKoB,W,uCAIJC,GACf,IAAIC,EAAUC,SAASF,EAAY,GAAI,IACnCG,EAAUD,SAASF,EAAY,GAAI,IAKvC,OAHAC,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAGxB,KAFjBE,EAAUA,EAAU,GAAK,IAAMA,EAAUA,K,oDAQzC,IAGIC,EAHcC,KAAKC,MAAsB,GAAhBD,KAAKE,UAIlB,EACVF,KAAKC,MAAM,GAAAD,KAAKE,SAA2B,IAC3CF,KAAKC,MAAM,GAAAD,KAAKE,SAA0B,GAGhD,OAFAd,QAAQC,IAAI,iBAAmBU,GAExBA,I,uCAIQI,GAOf,OANIA,IAAQ7B,KAAKN,MAAMkB,cACrBiB,EAAM,GACN7B,KAAKR,SAAS,CAAEoB,aAAcZ,KAAKa,iCAEnCgB,IAEKA,I,6BAIP7B,KAAKR,SAAS,CACZmB,WAAYX,KAAK8B,iBAAiB9B,KAAKN,MAAMiB,gB,+BAK/C,OACE,6BACE,qCAAWX,KAAK+B,iBAAiB/B,KAAKN,MAAMiB,YAA5C,KACA,8C,GAjEYH,c,sBCapBwB,IAASC,cAZc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOFT,QAAf,ECkCeU,E,kDAhDb,aAAe,IAAD,8BACZ,gBACKhD,MAAQ,CACXiD,WAAY,IAHF,E,gEAOO,IAAD,OACJX,EAASY,WAAWC,MAE5BC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAASE,MAChBC,EAAmB,GAEzB,IAAK,IAAIC,KAASH,EAAM,CACtB,IAAMI,EAAc,CAClB/C,GAAI8C,EACJE,WAAYL,EAAKG,IAEnBD,EAAiBI,KAAKF,GAExB,EAAK5D,SAAS,CACZmD,WAAYO,S,+BAMhB,OACE,yBAAKtD,UAAU,eACb,2CADF,gBAEE,4BACGI,KAAKN,MAAMiD,WAAWY,KAAI,SAACC,GAC1B,OACE,wBAAIC,IAAKD,EAAcnD,IACrB,2BACGmD,EAAcnD,GADjB,MACwBmD,EAAcH,YAFxC,0B,GAnCW7C,aCwEVkD,E,kDA1Cb,aAAe,IAAD,8BACZ,gBACKhE,MAAQ,CACXiE,SAAU,IAHA,E,kGAuBZ,OACE,yBAAK/D,UAAU,eACb,0CACA,yBAAKA,UAAU,YACb,4BACE,oEACA,4DACA,8DACA,sEAGJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GArCUY,aC1BlBoD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.bddee718.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      // visitors: this.state.visitors +1;\r\n      userName: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loginComponent\">\r\n        <div className=\"flexColumn\">\r\n          <div>\r\n            <form action=\"submit\" className=\"flexColumn\">\r\n              <label htmlFor=\"playerName\">Enter Name:</label>\r\n              {/* use anonymous functions if passing arguments */}\r\n              <input\r\n                onChange={this.handleChange}\r\n                value={this.state.userName}\r\n                placeholder=\"enter name\"\r\n                type=\"text\"\r\n                id=\"playerName\"\r\n                required\r\n              />\r\n              <button onClick={this.handleClick}>START</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      secondsVal: 60, //the timer will countdown from this value\r\n      botInterrupt: this.generateWeightedRandomValue(), //an impatient bot will interrupt the countdown at this value\r\n    };\r\n    console.log(this.state.botInterrupt);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.secondVal = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  //ref: https://stackoverflow.com/questions/20618355/the-simplest-possible-javascript-countdown-timer\r\n  formatForDisplay(countDown) {\r\n    let minutes = parseInt(countDown / 60, 10);\r\n    let seconds = parseInt(countDown % 60, 10);\r\n\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return minutes + \":\" + seconds;\r\n  }\r\n\r\n  //logic to generate a random time at which the impatient bot will reset the timer\r\n  generateWeightedRandomValue() {\r\n    //first pick a number between 0 and 59\r\n    let randomValue = Math.floor(Math.random() * 60);\r\n\r\n    //a random value that is more likely to be between 41 and 55 secs\r\n    let weightedRandomValue =\r\n      randomValue > 6\r\n        ? Math.floor(Math.random() * (55 - 41 + 1) + 41)\r\n        : Math.floor(Math.random() * (55 - 1 + 1) + 1);\r\n    console.log(\"bot interrupt:\" + weightedRandomValue);\r\n\r\n    return weightedRandomValue;\r\n  }\r\n\r\n  //Countdown unless the timer matches the \"interrupt\" time in which case reset\r\n  countdownOrReset(num) {\r\n    if (num === this.state.botInterrupt) {\r\n      num = 60;\r\n      this.setState({ botInterrupt: this.generateWeightedRandomValue() });\r\n    } else {\r\n      num--;\r\n    }\r\n    return num;\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      secondsVal: this.countdownOrReset(this.state.secondsVal),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>It is {this.formatForDisplay(this.state.secondsVal)} </h1>\r\n        <button>CLICK</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDiBZB5Uw7mgcJoFpRh0wSKU-ItAmVczvk\",\r\n  authDomain: \"button-game-6b89f.firebaseapp.com\",\r\n  databaseURL: \"https://button-game-6b89f.firebaseio.com\",\r\n  projectId: \"button-game-6b89f\",\r\n  storageBucket: \"button-game-6b89f.appspot.com\",\r\n  messagingSenderId: \"556932643649\",\r\n  appId: \"1:556932643649:web:770ada9a70d7ea82817fc0\",\r\n  measurementId: \"G-0T1KXSW461\",\r\n};\r\n\r\n// initialize firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n//firebase.analytics();\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./Firebase\";\r\n\r\nclass HighScores extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      highScores: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      const latestHighScores = []; //temp array to store high scores\r\n\r\n      for (let score in data) {\r\n        const scoreObject = {\r\n          id: score,\r\n          scoreValue: data[score],\r\n        };\r\n        latestHighScores.push(scoreObject);\r\n      }\r\n      this.setState({\r\n        highScores: latestHighScores,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App wrapper\">\r\n        <h1>High Scores</h1>​ ​\r\n        <ul>\r\n          {this.state.highScores.map((oneOfMyScores) => {\r\n            return (\r\n              <li key={oneOfMyScores.id}>\r\n                <p>\r\n                  {oneOfMyScores.id} - {oneOfMyScores.scoreValue}\r\n                </p>\r\n                ​ ​\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HighScores;\r\n","import React, { Component } from \"react\";\nimport Login from \"./Login\";\nimport \"./App.css\";\nimport Timer from \"./Timer\";\nimport HighScores from \"./HighScores\";\n\n//pseudo code\n//component 1: take in name, provide instructions, press START, pass name to component 2\n//component 2: start countdown timer, start function that has 1 bot running and counting down\n//component 2: whenever user clicks, pass name and time to database\n//component 3: connect to database, retrieve high scores.\n\n//logic:\n//1 on page load, show instructions, ask for name, get user to submit\n//2 on button click, hide component 1, pass name to component 2\n//2 start timer function but assign it a value it will reset at and say \"an impatient bot clicked!\"\n//3 on button click, show a color with name in high scores - connect to databse and retrieve\n\n// Pseudo code\n// component1  - take in name, provide instructions, click submit and pass name as a prop to component 2\n// component2  - timer, \"click\" button, bots running in bg\n// component3 - high scores, pull from database show in real-time,\n//  logic:\n//  1. On page load - component 1 appears:\n//  - ask for name with textbox\n//  - show instructions\n//  - show ready to play button\n//  - on click save name to state, hide the first component and show the second component\n//  2. Show timer that counts down, show click button, trigger bot that counts down to random number\n//  3. on click, by bot, start bot again\n//  4  on click, by human, end game, save score to db and show high scores along with team name.\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // const dbRef = firebase.database().ref();\n    // dbRef.on('value', (snapshot) => {\n    //   const data = snapshot.val();\n    //   const newBooksArray = [];\n    //   for (let propertyName in data) {\n    //     newBooksArray.push(data[propertyName]);\n    //   }\n    //   console.log(newBooksArray);\n    //   this.setState({\n    //     books: newBooksArray\n    //   })\n    // })\n  }\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <h1>the button</h1>\n        <div className=\"headerer\">\n          <ul>\n            <li>the button can only be clicked once.</li>\n            <li>the button demands patience.</li>\n            <li>your patience will be rewarded</li>\n            <li>be advised there are impatient bots.</li>\n          </ul>\n        </div>\n        <Login />\n        <Timer />\n        <HighScores />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}