{"version":3,"sources":["Login.js","Firebase.js","Timer.js","HighScores.js","App.js","index.js"],"names":["Login","handleChange","event","setState","playerName","target","value","props","onValChange","handleSubmit","state","trim","length","preventDefault","onSubmit","userName","this","className","action","e","htmlFor","onChange","pattern","title","type","id","required","onClick","class","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Timer","handleClick","clearInterval","secondVal","message","secondsVal","isGameOn","saveScoreToDB","botInterrupt","generateWeightedRandomValue","setInterval","tick","timerID","countDown","minutes","parseInt","seconds","Math","floor","random","num","countdownOrReset","name","score","database","ref","child","push","formatForDisplay","HighScores","highScores","orderByChild","limitToLast","on","snapshot","data","val","latestHighScorers","propertyName","highScorerObject","user","map","oneOfMyScores","key","App","handleLoginClick","bind","handleSubmitclick","username","isLoggedIn","newUserName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e90f91e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      playerName: \"\", //saving the input player name to state\r\n    };\r\n  }\r\n\r\n  //input textbox change\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      playerName: event.target.value,\r\n    });\r\n    this.props.onValChange(event.target.value);\r\n  };\r\n\r\n  //on button click\r\n  handleSubmit = (event) => {\r\n    if (this.state.playerName.trim().length < 3) {\r\n      return; //client side validation will show prompt\r\n    }\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.playerName);\r\n  };\r\n\r\n  render() {\r\n    const userName = this.props.userName;\r\n    return (\r\n      <div className=\"loginComponent\">\r\n        <div className=\"flexColumn\">\r\n          <form\r\n            action=\"submit\"\r\n            className=\"flexColumn\"\r\n            onSubmit={(e) => e.preventDefault()}\r\n          >\r\n            <label htmlFor=\"enterPlayerName\">ENTER PLAYER NAME</label>\r\n            <input\r\n              onChange={this.handleChange}\r\n              //client-side player name validation\r\n              pattern=\"^[A-Za-z0-9]{3,}$\"\r\n              title=\"enter alphanumeric values with at least three characters\"\r\n              value={userName}\r\n              type=\"text\"\r\n              id=\"enterPlayerName\"\r\n              required\r\n            />\r\n            <button onClick={this.handleSubmit}>START</button>\r\n          </form>\r\n        </div>\r\n        <div class=\"instructions\">\r\n          <ul>\r\n            <li>\r\n              You will soon meet\r\n              <span class=\"stylisedButton\"> the button</span> and a countdown\r\n              timer.\r\n            </li>\r\n\r\n            <li>\r\n              Press <span class=\"stylisedButton\">the button</span> whenever you\r\n              wish ... but not too soon.\r\n            </li>\r\n            <li>\r\n              <span class=\"stylisedButton\">The button</span> can only be pressed\r\n              once.\r\n            </li>\r\n            <li>Be warned, there are bots who might reset the timer.</li>\r\n            <li>\r\n              Your score will be inversely proportional to how fast you press\r\n              <span class=\"stylisedButton\"> The button</span>.\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n//connecting to the firebase data store\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDiBZB5Uw7mgcJoFpRh0wSKU-ItAmVczvk\",\r\n  authDomain: \"button-game-6b89f.firebaseapp.com\",\r\n  databaseURL: \"https://button-game-6b89f.firebaseio.com\",\r\n  projectId: \"button-game-6b89f\",\r\n  storageBucket: \"button-game-6b89f.appspot.com\",\r\n  messagingSenderId: \"556932643649\",\r\n  appId: \"1:556932643649:web:770ada9a70d7ea82817fc0\",\r\n  measurementId: \"G-0T1KXSW461\",\r\n};\r\n\r\n// initialize firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./Firebase\";\r\n\r\n//the Tiner component - visible once the player enters his name and \"logs in\"\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      secondsVal: 60, //the timer will countdown from this value\r\n      botInterrupt: this.generateWeightedRandomValue(), //an impatient bot will interrupt the countdown at this value\r\n      message: \"-\",\r\n      isGameOn: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.secondVal = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  //ref: https://stackoverflow.com/questions/20618355/the-simplest-possible-javascript-countdown-timer\r\n  formatForDisplay(countDown) {\r\n    let minutes = parseInt(countDown / 60, 10);\r\n    let seconds = parseInt(countDown % 60, 10);\r\n\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return minutes + \":\" + seconds;\r\n  }\r\n\r\n  //logic to generate a random time at which the impatient bot will reset the timer\r\n  generateWeightedRandomValue() {\r\n    //first pick a number between 0 and 59\r\n    let randomValue = Math.floor(Math.random() * 60);\r\n\r\n    //a random value that is more likely to be between 43 and 55 secs\r\n    let weightedRandomValue =\r\n      randomValue > 6\r\n        ? Math.floor(Math.random() * (55 - 43 + 1) + 43)\r\n        : Math.floor(Math.random() * (55 - 1 + 1) + 1);\r\n\r\n    return weightedRandomValue;\r\n  }\r\n\r\n  //Countdown unless the timer matches the \"interrupt\" time in which case reset\r\n  countdownOrReset(num) {\r\n    if (num === this.state.botInterrupt) {\r\n      num = 60;\r\n      this.setState({\r\n        botInterrupt: this.generateWeightedRandomValue(),\r\n        message: \"an impatient bot reset the timer!\",\r\n      });\r\n    } else {\r\n      num--;\r\n    }\r\n    //clear any messages after three seconds\r\n    if (num === 57) {\r\n      this.setState({ message: \"-\" });\r\n    }\r\n    return num;\r\n  }\r\n\r\n  //the player clicked the button!\r\n  handleClick = (event) => {\r\n    clearInterval(this.secondVal);\r\n    this.setState({\r\n      message:\r\n        this.props.value +\r\n        \", you scored \" +\r\n        (60 - this.state.secondsVal) * 100 +\r\n        \" points\",\r\n    });\r\n\r\n    if (this.state.isGameOn) {\r\n      //Saving name and score to Firebase - this will only happen once.\r\n      this.saveScoreToDB(this.props.value, (60 - this.state.secondsVal) * 100);\r\n      this.setState({\r\n        isGameOn: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  tick() {\r\n    this.setState({\r\n      secondsVal: this.countdownOrReset(this.state.secondsVal),\r\n    });\r\n  }\r\n\r\n  saveScoreToDB(name, score) {\r\n    const dbRef = firebase.database().ref();\r\n    let usersRef = dbRef.child(\"users\");\r\n\r\n    usersRef.push({ name, score });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"timerComponent\">\r\n        <div className=\"flexColumn\">\r\n          <div className=\"timerDisplay\">\r\n            <h2>{this.formatForDisplay(this.state.secondsVal)} </h2>\r\n          </div>\r\n          <div className=\"buttonHolder\">\r\n            <button onClick={this.handleClick}>CLICK</button>\r\n          </div>\r\n          <div className=\"messageHolder\">\r\n            <h3> {this.state.message} </h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./Firebase\";\r\n\r\n//the High Scores component - visible once the player enters his name and \"logs in\"\r\nclass HighScores extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      highScores: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref(\"users\");\r\n\r\n    dbRef\r\n      .orderByChild(\"score\")\r\n      .limitToLast(10) //only get the highest 10 scores\r\n      .on(\"value\", (snapshot) => {\r\n        const data = snapshot.val();\r\n        const latestHighScorers = [];\r\n\r\n        for (let propertyName in data) {\r\n          const highScorerObject = {\r\n            id: propertyName,\r\n            user: data[propertyName],\r\n          };\r\n\r\n          latestHighScorers.push(highScorerObject);\r\n        }\r\n\r\n        this.setState({\r\n          highScores: latestHighScorers,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"scoreComponent\">\r\n        <h3>High Scores</h3>​ ​\r\n        <ul>\r\n          {this.state.highScores.map((oneOfMyScores) => {\r\n            return (\r\n              <li key={oneOfMyScores.id}>\r\n                <p>\r\n                  {oneOfMyScores.user.name} - {oneOfMyScores.user.score}\r\n                </p>\r\n                ​ ​\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <p>Note: Top 10 scores appear in real-time in the list above</p>​ ​\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HighScores;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Login\";\nimport Timer from \"./Timer\";\nimport HighScores from \"./HighScores\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleSubmitclick = this.handleSubmitclick.bind(this);\n    this.state = {\n      username: \"\",\n      isLoggedIn: false,\n    };\n  }\n\n  //set isLoggedIn to true after a name has been entered\n  handleLoginClick(newUserName) {\n    this.setState({\n      isLoggedIn: false,\n      username: newUserName,\n    });\n  }\n\n  //set isLoggedIn to true after a name has been entered\n  handleSubmitclick(newUserName) {\n    this.setState({\n      isLoggedIn: true,\n      username: newUserName,\n    });\n  }\n\n  render() {\n    const userName = this.state.username;\n    return (\n      <div className=\"appComponent wrapper\">\n        <nav>\n          <h1>(Do Not) Press The Button</h1>\n        </nav>\n\n        {/* show the login component on page load and if the name hasn't been entered*/}\n        {this.state.isLoggedIn ? (\n          \"\"\n        ) : (\n          <Login\n            value={userName}\n            onValChange={this.handleLoginClick}\n            onSubmit={this.handleSubmitclick}\n          />\n        )}\n\n        {/* show the Timer component next along with previous High Scores*/}\n        {this.state.isLoggedIn ? <Timer value={this.state.username} /> : null}\n        {this.state.isLoggedIn ? <HighScores /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}