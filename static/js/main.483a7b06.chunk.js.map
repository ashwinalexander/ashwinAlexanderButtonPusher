{"version":3,"sources":["Login.js","Timer.js","Firebase.js","HighScores.js","App.js","index.js"],"names":["Login","handleChange","event","setState","playerName","target","value","props","onValChange","handleSubmit","preventDefault","onSubmit","state","userName","this","className","action","htmlFor","onChange","placeholder","pattern","title","type","id","required","onClick","Component","Timer","secondsVal","botInterrupt","generateWeightedRandomValue","console","log","secondVal","setInterval","tick","clearInterval","timerID","countDown","minutes","parseInt","seconds","weightedRandomValue","Math","floor","random","num","countdownOrReset","formatForDisplay","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","HighScores","highScores","database","ref","on","snapshot","data","val","latestHighScores","score","scoreObject","scoreValue","push","map","oneOfMyScores","key","App","handleLoginClick","bind","handleSubmitclick","username","isLoggedIn","newUserName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.483a7b06.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      playerName: \"\", //saving the input player name to state\r\n    };\r\n  }\r\n\r\n  //input textbox change\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      playerName: event.target.value,\r\n    });\r\n    this.props.onValChange(event.target.value);\r\n  };\r\n\r\n  //on button submit\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.playerName);\r\n  };\r\n\r\n  render() {\r\n    const userName = this.props.userName;\r\n    return (\r\n      <div className=\"loginComponent\">\r\n        <div>\r\n          <ul>\r\n            <li>the button can only be clicked once.</li>\r\n            <li>the button demands patience.</li>\r\n            <li>your patience will be rewarded</li>\r\n            <li>be advised there are impatient bots.</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"flexColumn\">\r\n          <form action=\"submit\" className=\"flexColumn\">\r\n            <label htmlFor=\"enterPlayerName\">Enter Name:</label>\r\n            <input\r\n              onChange={this.handleChange}\r\n              placeholder=\"enter name\"\r\n              //error handling and name validation\r\n              pattern=\"^[A-Za-z0-9]{3,}$\"\r\n              title=\"enter alphanumeric values with at least three characters\"\r\n              value={userName}\r\n              type=\"text\"\r\n              id=\"enterPlayerName\"\r\n              required\r\n            />\r\n            <button onClick={this.handleSubmit}>START</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      secondsVal: 60, //the timer will countdown from this value\r\n      botInterrupt: this.generateWeightedRandomValue(), //an impatient bot will interrupt the countdown at this value\r\n    };\r\n    console.log(this.state.botInterrupt);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.secondVal = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  //ref: https://stackoverflow.com/questions/20618355/the-simplest-possible-javascript-countdown-timer\r\n  formatForDisplay(countDown) {\r\n    let minutes = parseInt(countDown / 60, 10);\r\n    let seconds = parseInt(countDown % 60, 10);\r\n\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return minutes + \":\" + seconds;\r\n  }\r\n\r\n  //logic to generate a random time at which the impatient bot will reset the timer\r\n  generateWeightedRandomValue() {\r\n    //first pick a number between 0 and 59\r\n    let randomValue = Math.floor(Math.random() * 60);\r\n\r\n    //a random value that is more likely to be between 41 and 55 secs\r\n    let weightedRandomValue =\r\n      randomValue > 6\r\n        ? Math.floor(Math.random() * (55 - 41 + 1) + 41)\r\n        : Math.floor(Math.random() * (55 - 1 + 1) + 1);\r\n    console.log(\"bot interrupt:\" + weightedRandomValue);\r\n\r\n    return weightedRandomValue;\r\n  }\r\n\r\n  //Countdown unless the timer matches the \"interrupt\" time in which case reset\r\n  countdownOrReset(num) {\r\n    if (num === this.state.botInterrupt) {\r\n      num = 60;\r\n      this.setState({ botInterrupt: this.generateWeightedRandomValue() });\r\n    } else {\r\n      num--;\r\n    }\r\n    return num;\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      secondsVal: this.countdownOrReset(this.state.secondsVal),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>It is {this.formatForDisplay(this.state.secondsVal)} </h1>\r\n        <h1>It is {this.props.value} </h1>\r\n        <button>CLICK</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDiBZB5Uw7mgcJoFpRh0wSKU-ItAmVczvk\",\r\n  authDomain: \"button-game-6b89f.firebaseapp.com\",\r\n  databaseURL: \"https://button-game-6b89f.firebaseio.com\",\r\n  projectId: \"button-game-6b89f\",\r\n  storageBucket: \"button-game-6b89f.appspot.com\",\r\n  messagingSenderId: \"556932643649\",\r\n  appId: \"1:556932643649:web:770ada9a70d7ea82817fc0\",\r\n  measurementId: \"G-0T1KXSW461\",\r\n};\r\n\r\n// initialize firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n//firebase.analytics();\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"./Firebase\";\r\n\r\nclass HighScores extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      highScores: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      const latestHighScores = []; //temp array to store high scores\r\n\r\n      for (let score in data) {\r\n        const scoreObject = {\r\n          id: score,\r\n          scoreValue: data[score],\r\n        };\r\n        latestHighScores.push(scoreObject);\r\n      }\r\n      this.setState({\r\n        highScores: latestHighScores,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App wrapper\">\r\n        <h1>High Scores</h1>​ ​\r\n        <ul>\r\n          {this.state.highScores.map((oneOfMyScores) => {\r\n            return (\r\n              <li key={oneOfMyScores.id}>\r\n                <p>\r\n                  {oneOfMyScores.id} - {oneOfMyScores.scoreValue}\r\n                </p>\r\n                ​ ​\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HighScores;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./Login\";\nimport Timer from \"./Timer\";\nimport HighScores from \"./HighScores\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleSubmitclick = this.handleSubmitclick.bind(this);\n    this.state = {\n      username: \"\",\n      isLoggedIn: false,\n    };\n  }\n\n  //set isLoggedIn to true after a name has been entered\n  handleLoginClick(newUserName) {\n    this.setState({\n      isLoggedIn: false,\n      username: newUserName,\n    });\n  }\n\n  //set isLoggedIn to true after a name has been entered\n  handleSubmitclick(newUserName) {\n    this.setState({\n      isLoggedIn: true,\n      username: newUserName,\n    });\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const userName = this.state.username;\n    return (\n      <div className=\"App wrapper\">\n        <h1>Welcome to The Button</h1>\n        {/* show the login component on page load and if the name hasn't been entered*/}\n        {this.state.isLoggedIn ? (\n          \"\"\n        ) : (\n          <Login\n            value={userName}\n            onValChange={this.handleLoginClick}\n            onSubmit={this.handleSubmitclick}\n          />\n        )}\n\n        {/* show the Timer component next along with previous High Scores*/}\n        {true ? <Timer value={this.state.username} /> : null}\n        {this.state.isLoggedIn ? <HighScores /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}